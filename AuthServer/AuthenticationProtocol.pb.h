// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthenticationProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthenticationProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthenticationProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthenticationProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthenticationProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthenticationProtocol_2eproto;
namespace authentication {
class AuthenticateWeb;
class AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
class AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
class AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
class CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFailure;
class CreateAccountWebFailureDefaultTypeInternal;
extern CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
class CreateAccountWebSuccess;
class CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
}  // namespace authentication
PROTOBUF_NAMESPACE_OPEN
template<> ::authentication::AuthenticateWeb* Arena::CreateMaybeMessage<::authentication::AuthenticateWeb>(Arena*);
template<> ::authentication::AuthenticateWebFailure* Arena::CreateMaybeMessage<::authentication::AuthenticateWebFailure>(Arena*);
template<> ::authentication::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::authentication::AuthenticateWebSuccess>(Arena*);
template<> ::authentication::CreateAccountWeb* Arena::CreateMaybeMessage<::authentication::CreateAccountWeb>(Arena*);
template<> ::authentication::CreateAccountWebFailure* Arena::CreateMaybeMessage<::authentication::CreateAccountWebFailure>(Arena*);
template<> ::authentication::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::authentication::CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace authentication {

enum CreateAccountWebFailure_reason : int {
  CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFailure_reason_INVALID_PASSWORD = 1,
  CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR = 2
};
bool CreateAccountWebFailure_reason_IsValid(int value);
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MIN = CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MAX = CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebFailure_reason_reason_ARRAYSIZE = CreateAccountWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFailure_reason_descriptor();
template<typename T>
inline const std::string& CreateAccountWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebFailure_reason_descriptor(), enum_t_value);
}
inline bool CreateAccountWebFailure_reason_Parse(
    const std::string& name, CreateAccountWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebFailure_reason>(
    CreateAccountWebFailure_reason_descriptor(), name, value);
}
enum AuthenticateWebFailure_reason : int {
  AuthenticateWebFailure_reason_INVALID_CREDENTIALS = 1,
  AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR = 2
};
bool AuthenticateWebFailure_reason_IsValid(int value);
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MIN = AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MAX = AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWebFailure_reason_reason_ARRAYSIZE = AuthenticateWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFailure_reason_descriptor();
template<typename T>
inline const std::string& AuthenticateWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebFailure_reason_descriptor(), enum_t_value);
}
inline bool AuthenticateWebFailure_reason_Parse(
    const std::string& name, AuthenticateWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebFailure_reason>(
    AuthenticateWebFailure_reason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWeb) */ {
 public:
  CreateAccountWeb();
  virtual ~CreateAccountWeb();

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return CreateMaybeMessage<CreateAccountWeb>(nullptr);
  }

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWeb& from);
  void MergeFrom(const CreateAccountWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebSuccess) */ {
 public:
  CreateAccountWebSuccess();
  virtual ~CreateAccountWebSuccess();

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebSuccess* New() const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(nullptr);
  }

  CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWebSuccess& from);
  void MergeFrom(const CreateAccountWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creation_date = 3;
  bool has_creation_date() const;
  private:
  bool _internal_has_creation_date() const;
  public:
  void clear_creation_date();
  const std::string& creation_date() const;
  void set_creation_date(const std::string& value);
  void set_creation_date(std::string&& value);
  void set_creation_date(const char* value);
  void set_creation_date(const char* value, size_t size);
  std::string* mutable_creation_date();
  std::string* release_creation_date();
  void set_allocated_creation_date(std::string* creation_date);
  private:
  const std::string& _internal_creation_date() const;
  void _internal_set_creation_date(const std::string& value);
  std::string* _internal_mutable_creation_date();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebFailure) */ {
 public:
  CreateAccountWebFailure();
  virtual ~CreateAccountWebFailure();

  CreateAccountWebFailure(const CreateAccountWebFailure& from);
  CreateAccountWebFailure(CreateAccountWebFailure&& from) noexcept
    : CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFailure& operator=(const CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFailure& operator=(CreateAccountWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFailure*>(
               &_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountWebFailure& a, CreateAccountWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebFailure* New() const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(nullptr);
  }

  CreateAccountWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWebFailure& from);
  void MergeFrom(const CreateAccountWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateAccountWebFailure_reason reason;
  static constexpr reason ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr reason INVALID_PASSWORD =
    CreateAccountWebFailure_reason_INVALID_PASSWORD;
  static constexpr reason INTERNAL_SERVER_ERROR =
    CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return CreateAccountWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    CreateAccountWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    CreateAccountWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    CreateAccountWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return CreateAccountWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return CreateAccountWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(const std::string& name,
      reason* value) {
    return CreateAccountWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .authentication.CreateAccountWebFailure.reason error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::authentication::CreateAccountWebFailure_reason error() const;
  void set_error(::authentication::CreateAccountWebFailure_reason value);
  private:
  ::authentication::CreateAccountWebFailure_reason _internal_error() const;
  void _internal_set_error(::authentication::CreateAccountWebFailure_reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int error_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWeb) */ {
 public:
  AuthenticateWeb();
  virtual ~AuthenticateWeb();

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return CreateMaybeMessage<AuthenticateWeb>(nullptr);
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWeb& from);
  void MergeFrom(const AuthenticateWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebSuccess) */ {
 public:
  AuthenticateWebSuccess();
  virtual ~AuthenticateWebSuccess();

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebSuccess* New() const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(nullptr);
  }

  AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWebSuccess& from);
  void MergeFrom(const AuthenticateWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  void set_creationdate(const std::string& value);
  void set_creationdate(std::string&& value);
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  std::string* mutable_creationdate();
  std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebFailure) */ {
 public:
  AuthenticateWebFailure();
  virtual ~AuthenticateWebFailure();

  AuthenticateWebFailure(const AuthenticateWebFailure& from);
  AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
    : AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
               &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebFailure* New() const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(nullptr);
  }

  AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWebFailure& from);
  void MergeFrom(const AuthenticateWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AuthenticationProtocol_2eproto);
    return ::descriptor_table_AuthenticationProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticateWebFailure_reason reason;
  static constexpr reason INVALID_CREDENTIALS =
    AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
  static constexpr reason INTERNAL_SERVER_ERROR =
    AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return AuthenticateWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    AuthenticateWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    AuthenticateWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    AuthenticateWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return AuthenticateWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return AuthenticateWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(const std::string& name,
      reason* value) {
    return AuthenticateWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .authentication.AuthenticateWebFailure.reason error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::authentication::AuthenticateWebFailure_reason error() const;
  void set_error(::authentication::AuthenticateWebFailure_reason value);
  private:
  ::authentication::AuthenticateWebFailure_reason _internal_error() const;
  void _internal_set_error(::authentication::AuthenticateWebFailure_reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int error_;
  friend struct ::TableStruct_AuthenticationProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// required int64 requestId = 1;
inline bool CreateAccountWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWeb::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void CreateAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void CreateAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.requestId)
}

// required string email = 2;
inline bool CreateAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.email)
  return _internal_email();
}
inline void CreateAccountWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.email)
  return _internal_mutable_email();
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAccountWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.CreateAccountWeb.email)
}
inline void CreateAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.CreateAccountWeb.email)
}
inline void CreateAccountWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.email)
}

// required string plaintextPassword = 3;
inline bool CreateAccountWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void CreateAccountWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.plaintextPassword)
}
inline std::string* CreateAccountWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& CreateAccountWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAccountWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.CreateAccountWeb.plaintextPassword)
}
inline void CreateAccountWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.CreateAccountWeb.plaintextPassword)
}
inline void CreateAccountWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.CreateAccountWeb.plaintextPassword)
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// required int64 requestId = 1;
inline bool CreateAccountWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void CreateAccountWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.requestId)
}

// required int64 userId = 2;
inline bool CreateAccountWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountWebSuccess::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void CreateAccountWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void CreateAccountWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.userId)
}

// required string creation_date = 3;
inline bool CreateAccountWebSuccess::_internal_has_creation_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_creation_date() const {
  return _internal_has_creation_date();
}
inline void CreateAccountWebSuccess::clear_creation_date() {
  creation_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWebSuccess::creation_date() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.creation_date)
  return _internal_creation_date();
}
inline void CreateAccountWebSuccess::set_creation_date(const std::string& value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.creation_date)
}
inline std::string* CreateAccountWebSuccess::mutable_creation_date() {
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWebSuccess.creation_date)
  return _internal_mutable_creation_date();
}
inline const std::string& CreateAccountWebSuccess::_internal_creation_date() const {
  return creation_date_.GetNoArena();
}
inline void CreateAccountWebSuccess::_internal_set_creation_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creation_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAccountWebSuccess::set_creation_date(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  creation_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.CreateAccountWebSuccess.creation_date)
}
inline void CreateAccountWebSuccess::set_creation_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  creation_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.CreateAccountWebSuccess.creation_date)
}
inline void CreateAccountWebSuccess::set_creation_date(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  creation_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.CreateAccountWebSuccess.creation_date)
}
inline std::string* CreateAccountWebSuccess::_internal_mutable_creation_date() {
  _has_bits_[0] |= 0x00000001u;
  return creation_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAccountWebSuccess::release_creation_date() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWebSuccess.creation_date)
  if (!has_creation_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creation_date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountWebSuccess::set_allocated_creation_date(std::string* creation_date) {
  if (creation_date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creation_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creation_date);
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWebSuccess.creation_date)
}

// -------------------------------------------------------------------

// CreateAccountWebFailure

// required int64 requestId = 1;
inline bool CreateAccountWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWebFailure::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFailure.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void CreateAccountWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFailure.requestId)
}

// required .authentication.CreateAccountWebFailure.reason error = 2;
inline bool CreateAccountWebFailure::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebFailure::has_error() const {
  return _internal_has_error();
}
inline void CreateAccountWebFailure::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::CreateAccountWebFailure_reason CreateAccountWebFailure::_internal_error() const {
  return static_cast< ::authentication::CreateAccountWebFailure_reason >(error_);
}
inline ::authentication::CreateAccountWebFailure_reason CreateAccountWebFailure::error() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFailure.error)
  return _internal_error();
}
inline void CreateAccountWebFailure::_internal_set_error(::authentication::CreateAccountWebFailure_reason value) {
  assert(::authentication::CreateAccountWebFailure_reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void CreateAccountWebFailure::set_error(::authentication::CreateAccountWebFailure_reason value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFailure.error)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// required int64 requestId = 1;
inline bool AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWeb::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.requestId)
}

// required string email = 2;
inline bool AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.email)
  return _internal_email();
}
inline void AuthenticateWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.email)
  return _internal_mutable_email();
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.email)
}

// required string plaintextPassword = 3;
inline bool AuthenticateWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void AuthenticateWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.plaintextPassword)
}
inline std::string* AuthenticateWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& AuthenticateWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.AuthenticateWeb.plaintextPassword)
}
inline void AuthenticateWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.AuthenticateWeb.plaintextPassword)
}
inline void AuthenticateWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.AuthenticateWeb.plaintextPassword)
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// required int64 requestId = 1;
inline bool AuthenticateWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void AuthenticateWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.requestId)
}

// required int64 userId = 2;
inline bool AuthenticateWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticateWebSuccess::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void AuthenticateWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthenticateWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.userId)
}

// required string creationDate = 3;
inline bool AuthenticateWebSuccess::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
inline void AuthenticateWebSuccess::set_creationdate(const std::string& value) {
  _internal_set_creationdate(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::mutable_creationdate() {
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWebSuccess.creationDate)
  return _internal_mutable_creationdate();
}
inline const std::string& AuthenticateWebSuccess::_internal_creationdate() const {
  return creationdate_.GetNoArena();
}
inline void AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateWebSuccess::set_creationdate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authentication.AuthenticateWebSuccess.creationDate)
}
inline void AuthenticateWebSuccess::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authentication.AuthenticateWebSuccess.creationDate)
}
inline void AuthenticateWebSuccess::set_creationdate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authentication.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWebSuccess.creationDate)
  if (!has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate);
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// required int64 requestId = 1;
inline bool AuthenticateWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWebFailure::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void AuthenticateWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFailure.requestId)
}

// required .authentication.AuthenticateWebFailure.reason error = 2;
inline bool AuthenticateWebFailure::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebFailure::has_error() const {
  return _internal_has_error();
}
inline void AuthenticateWebFailure::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::AuthenticateWebFailure_reason AuthenticateWebFailure::_internal_error() const {
  return static_cast< ::authentication::AuthenticateWebFailure_reason >(error_);
}
inline ::authentication::AuthenticateWebFailure_reason AuthenticateWebFailure::error() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFailure.error)
  return _internal_error();
}
inline void AuthenticateWebFailure::_internal_set_error(::authentication::AuthenticateWebFailure_reason value) {
  assert(::authentication::AuthenticateWebFailure_reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void AuthenticateWebFailure::set_error(::authentication::AuthenticateWebFailure_reason value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFailure.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authentication

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::authentication::CreateAccountWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::CreateAccountWebFailure_reason>() {
  return ::authentication::CreateAccountWebFailure_reason_descriptor();
}
template <> struct is_proto_enum< ::authentication::AuthenticateWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::AuthenticateWebFailure_reason>() {
  return ::authentication::AuthenticateWebFailure_reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthenticationProtocol_2eproto
